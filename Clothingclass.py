# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vtajowr-XgTXvIZ7pD9NTypYKEv6X5Yi
"""

# Commented out IPython magic to ensure Python compatibility.
#Using pytorch to classify clothing items
#Fashion-MNIST is a dataset of Zalando's article imagesâ€”consisting of a training set of 60,000 examples and a test set of 10,000 examples. 
#Each example is a 28x28 grayscale image, associated with a label from 10 classes. 
#Run each cell separated by comments one by one to better understand results


#Loading the dataset through torchvision
import torch
from torchvision import datasets, transforms
import helper

# Defining a transform to normalize the data
transform = transforms.Compose([transforms.ToTensor(),
                                transforms.Normalize((0.5,), (0.5,))])
# Download and load the training data
trainset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)

# Download and load the test data
testset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=False, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=True)

#see one sample image
import matplotlib.pyplot as plt
import numpy as np
def imshow(image, ax=None, title=None, normalize=True):
    """Imshow for Tensor."""
    if ax is None:
        fig, ax = plt.subplots()
    image = image.numpy().transpose((1, 2, 0))

    if normalize:
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        image = std * image + mean
        image = np.clip(image, 0, 1)

    ax.imshow(image)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    ax.tick_params(axis='both', length=0)
    ax.set_xticklabels('')
    ax.set_yticklabels('')

    return ax
image, label = next(iter(trainloader))
imshow(image[0,:]);

# Defining network architecture 
import torch
from torch import nn

model=nn.Sequential(nn.Linear(784,128), #hidden layer 1
                    nn.ReLU(),
                    nn.Linear(128,64), #hidden layer 2
                    nn.ReLU(),
                    nn.Linear(64,10), #Output layer
                    nn.LogSoftmax(dim=1)
                    )

# define the criterion and optimizer
from torch import optim
criterion=nn.NLLLoss()
optimizer = optim.SGD(model.parameters(), lr=0.003)

# Training the network 
epochs=5
for e in range(epochs):
  for images,labels in trainloader:
    images=images.view(images.shape[0],-1)
    optimizer.zero_grad()
    output=model(images)
    
    loss=criterion(output,labels)
    loss.backward()
    optimizer.step()

  
# Testing the network
# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'

def view_classify(img, ps, version="MNIST"):
    ''' Function for viewing an image and it's predicted classes.
    '''
    ps = ps.data.numpy().squeeze()

    fig, (ax1, ax2) = plt.subplots(figsize=(6,9), ncols=2)
    ax1.imshow(img.resize_(1, 28, 28).numpy().squeeze())
    ax1.axis('off')
    ax2.barh(np.arange(10), ps)
    ax2.set_aspect(0.1)
    ax2.set_yticks(np.arange(10))
    if version == "MNIST":
        ax2.set_yticklabels(np.arange(10))
    elif version == "Fashion":
        ax2.set_yticklabels(['T-shirt/top',
                            'Trouser',
                            'Pullover',
                            'Dress',
                            'Coat',
                            'Sandal',
                            'Shirt',
                            'Sneaker',
                            'Bag',
                            'Ankle Boot'], size='small');
    ax2.set_title('Class Probability')
    ax2.set_xlim(0, 1.1)

    plt.tight_layout()




dataiter = iter(testloader)
images, labels = dataiter.next()
img = images[0]
# Convert 2D image to 1D vector
img = img.resize_(1, 784)
output=model(img)
# TODO: Calculate the class probabilities (softmax) for img
ps = torch.exp(output)

# Plot the image and probabilities
view_classify(img.resize_(1, 28, 28), ps, version='Fashion')